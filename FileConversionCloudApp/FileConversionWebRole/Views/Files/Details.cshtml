@model FileConversionCommon.File

@{
    ViewBag.Title = "Details";
}

<h2>Details</h2>

<div>
    <h4>File</h4>
    <hr />
    <input id="fileID" type="hidden" name="NextStep" value=@Html.DisplayFor(model => model.fileId).ToString() />
    <dl class="dl-horizontal">

        @Html.HiddenFor(model => model.fileId)
       

        <dt>
            @Html.DisplayNameFor(model => model.fileURL)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.fileURL)
            <input id="fileUrl" type="hidden" name="NextStep" value= @Html.DisplayFor(model => model.fileURL).ToString() />
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.convertedFilelURL)
        </dt>

        <dd id="value">
            @Html.DisplayFor(model => model.convertedFilelURL)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.postedDate)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.postedDate)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.destinationEmail)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.destinationEmail)
        </dd>

    </dl>

    <div id="progressDisplay" style="display:none">
        <div class="progress" id="progresssBar">
            <div id="progresssBarValue" class="progress-bar" role="progressbar" aria-valuenow="60" aria-valuemin="0" aria-valuemax="100">
            </div>
        </div>
    </div>
    <div id="completedDisplay" style="display:none">
        <span class="glyphicon glyphicon-check"></span>

        @*Download shows when queue processes msg else it will return an empty file*@
        @*@if (Model.convertedFilename != null)
        {
                @Html.ActionLink("Download", "Download", new { id = Model.fileId })
        }*@
        
        @Html.ActionLink("Download", "Download", new { id = Url.RequestContext.RouteData.Values["id"] })
        
    </div>

</div>
<p>
    @Html.ActionLink("Back to List", "Index")
</p>

@section Scripts {
    <script src="~/Scripts/jquery.signalR-2.2.0.js"></script>
    <script src="~/signalr/js"></script>
    <script src="/signalr/hubs"></script>
    <script>
        (function () {

            $(window).load(function () {
                $.ajax({
                    url: '/files/dojob',
                    type: 'POST',
                    data: JSON.stringify({ fileId: $("#fileID").val() }),
                    contentType: 'application/json; chartset=utf-8',
                    success: function (data) {
                        trackJobProgress(data);
                    },
                    error: function () {
                        alert("error");
                    }
                });
            });

            function trackJobProgress(job) {
                setProgressBarWidth(job.Progress);
                $("#completedDisplay").hide();
                $('#progressDisplay').show();

                //the hub gives notifications about job progress
                var hubProxy = $.connection.progressHub;

                //update the progress bar
                hubProxy.client.progressChanged = function (jobId, progress) {
                    setProgressBarWidth(progress);
                };

                //flips switches to hide the progress bar and show the completed message
                hubProxy.client.jobCompleted = function (jobId) {
                    $('#progressDisplay').hide();
                    $("#completedDisplay").show();
                    $("#value").html("need to get link");
                    $("#startButton").prop('disabled', false);
                    $.connection.hub.stop();
                };


                //set up the connection with the server
                //It uses the hub proxy, this time to invoke a method on the server trackJob()
                //the server makes sure that this client only receives notifications about that particular job
                $.connection.hub.start().done(function () {
                    hubProxy.server.trackJob(job.JobId);
                });
            }

            function setProgressBarWidth(progress) {
                $("#progresssBarValue").css("width", progress + "%");
            }
        })();
    </script>
}


